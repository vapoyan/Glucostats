name: Android Build Workflow

on:
  push:
    branches:
      - develop  # Triggers on push to develop
      - staging  # Triggers on push to main

jobs:
  # This job runs when there is a push to the develop branch. The goal is to build the app in debug
  # mode and run unit tests.
  build-and-run-tests:
    if: github.ref == 'refs/heads/develop'
    name: Build and Test in Debug Mode
    runs-on: ubuntu-latest

    env:
      DEXCOM_CLIENT_ID: ${{ secrets.DEXCOM_CLIENT_ID }}
      DEXCOM_CLIENT_SECRET: ${{ secrets.DEXCOM_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Installs and configures the Java Development Kit (JDK 17) to build the project.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Runs the Gradle task to build the APK in debug mode.
      - name: Build with Gradle (Debug Mode)
        run: ./gradlew assembleDebug
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.path }}

      # Executes unit tests for the debug build type.
      - name: Run tests
        run: ./gradlew testDebugUnitTest

  # This job is triggered on a push to the main branch. The goal is to build the app in release
  # mode, sign it, and upload it to Google Play for internal testing.
  deploy-to-staging:
    if: github.ref == 'refs/heads/staging'
    name: Build and Deploy Release to Google Play
    environment: staging
    runs-on: ubuntu-latest

    env:
      DEXCOM_CLIENT_ID: ${{ secrets.DEXCOM_CLIENT_ID }}
      DEXCOM_CLIENT_SECRET: ${{ secrets.DEXCOM_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Installs and configures the Java Development Kit (JDK 17) to build the project.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # The keystore, stored as a base64-encoded string in GitHub Secrets, is decoded and saved
      # to /tmp/keystore.jks. This file is used to sign the app in the next step.
      - name: Decode and save keystore file
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > /tmp/keystore.jks

      # Builds the app bundle in release mode using the decoded keystore file and environment
      # variables for signing.
      - name: Build with Gradle (Release Mode)
        run: ./gradlew bundleRelease
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.path }}
          ANDROID_KEYSTORE: /tmp/keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      # Uploads the generated AAB as an artifact so it can be used later or for uploading to store.
      - name: Upload artifact for later use
        uses: actions/upload-artifact@v3
        with:
          name: release-aab
          path: app/build/outputs/bundle/release/app-release.aab

      # Installs Fastlane, a tool to automate deployments to the Google Play Store.
      - name: Install Fastlane
        run: |
          gem install fastlane --user-install
          export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"

      # Uploads the signed Android App Bundle to Google Play for internal testing using the Fastlane
      # supply command. The SERVICE_ACCOUNT_JSON is provided as a secret containing the Google Play
      # API credentials.
      - name: Upload to Google Play (Internal Testing)
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
        run: |
          echo "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON" > /tmp/service_account.json
          fastlane supply --aab app/build/outputs/bundle/release/app-release.aab --track internal --json_key /tmp/service_account.json --package_name app.glucostats --release_status draft